name: 'Update Changelog and Bump Version'
description: 'GitHub action for updating changelog and bumping the project version using git commit messages.'
author: prantlf

branding:
  icon: sunrise
  color: yellow

inputs:
  branches:
    description: >-
      Branches which this action should run for, which are used to publishing releases. Use spaces for separating the branch names. If you want to use multiple lines in YAML, introduce them with ">-". If you want to allow all branches, set the value to "*".
    default: main master
  enable:
    description: >-
      Can be set to `false` to prevent this action from running. It's helpful in the pipeline, which will not continue releasing, but only building and testing, and that will be decided in the middle of a job execution.
    default: true
  bump-files:
    description: >-
      Extra files in which to bump the version number, in addition to the package description file.
  dry-run:
    description: >-
      Can be set to `true` to only print what would be done without actually doing it.
    default: false
  debug:
    description: >-
      Can be set to `true` to enable debug logging of the supporting tools. Debug logging will be enabled also if it's enabled on the runner.
    default: false

outputs:
  bumped:
    description: >-
      Set to `true` if the changelog was updated and the new version set.
    value: ${{ steps.bump.outputs.bumped }}
  new-version:
    description: >-
      The new version written to the changelog and to the project source files.
    value: ${{ steps.bump.outputs.new-version }}
  changed-files:
    description: >-
      Files modified by this action, separated by spaces.
    value: ${{ steps.bump.outputs.changed-files }}

runs:
  using: 'composite'
  steps:
  - name: Setup parameters
    if: ${{ inputs.enable == 'true' }}
    id: setup
    env:
      BV_BRANCHES: ${{ inputs.branches }}
    shell: bash
    run: |
      if [[ "$BV_BRANCHES" == "*" || " $BV_BRANCHES " == *" $GITHUB_REF_NAME "* ]]; then
        echo "enable=true" >> $GITHUB_OUTPUT
      fi
  - name: Install newchanges
    if: ${{ steps.setup.outputs.enable == 'true' }}
    uses: prantlf/install-release-action@v1
    with:
      repo: prantlf/v-newchanges
  - name: Install vp
    if: ${{ steps.setup.outputs.enable == 'true' }}
    uses: prantlf/install-release-action@v1
    with:
      repo: prantlf/vp
  - name: Update changelog and bump version
    if: ${{ steps.setup.outputs.enable == 'true' }}
    id: bump
    shell: bash
    env:
      BV_FILES: ${{ inputs.bump-files }}
      BV_DRY: ${{ inputs.dry-run }}
      BV_DEBUG: ${{ inputs.debug }}
    run: |
      VP_OPTIONS="-v --no-commit --no-failure"
      if [[ ! -f "v.mod" ]]; then
        if [[ ! -f "package.json" ]]; then
          echo "v.mod or package.json not found, only updating changelog"
          VP_OPTIONS="$VP_OPTIONS --no-bump"
        else
          echo "v.mod not found, package.json found"
          VP_OPTIONS="$VP_OPTIONS --no-vlang"
        fi
      else
        if [[ ! -f "package.json" ]]; then
          echo "v.mod found, package.json not found"
          VP_OPTIONS="$VP_OPTIONS --no-node"
        else
          echo "v.mod and package.json found"
        fi
      fi
      if [[ "$BV_FILES" != "" ]]; then
        echo "extra files to bump version in: $BV_FILES"
        VP_OPTIONS="$VP_OPTIONS -b $BV_FILES"
      fi
      if [[ "$BV_DRY" == "true" ]]; then
        echo "dry-run enabled"
        VP_OPTIONS="$VP_OPTIONS -d"
      fi
      echo "execute \"vp $VP_OPTIONS version\""
      if [[ "$BV_DEBUG" == "true" || "$RUNNER_DEBUG" == "1" ]]; then
        VP_OUT=$(DEBUG=* vp $VP_OPTIONS version)
      else
        VP_OUT=$(vp $VP_OPTIONS version)
      fi
      if [ $? -eq 0 ]; then
        echo "$VP_OUT"
        VP_VER_RE="version ([0-9]+\\.[0-9]+\\.[0-9]+)"
        if [[ "$VP_OUT" =~ $VP_VER_RE ]]; then
          echo "new-version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          if [[ "$BV_DRY" != "true" ]]; then
            echo "execute: \"git ls-files --exclude-standard -m\""
            BV_CHANGES=$(git ls-files --exclude-standard -m)
            if [[ "$BV_CHANGES" != "" ]]; then
              echo "changes detected:"
              echo "$BV_CHANGES"
              echo "changed-files<<BV_CHANGES" >> $GITHUB_OUTPUT
              echo "$BV_CHANGES" >> $GITHUB_OUTPUT
              echo "BV_CHANGES" >> $GITHUB_OUTPUT
            else
              echo "no changes detected"
              exit 1
            fi
            echo "bumped=true" >> $GITHUB_OUTPUT
          fi
        fi
      else
        if [[ "$VP_OUT" != "" ]]; then
          echo "$VP_OUT"
        fi
        exit 1
      fi
