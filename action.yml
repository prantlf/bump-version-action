name: 'Update Changelog and Bump Version'
description: 'GitHub action for updating changelog and bumping the project version using git commit messages.'
author: prantlf

branding:
  icon: sunrise
  color: yellow

inputs:
  branches:
    description: >-
      Branches which this action should run for, which are used to publishing releases. Use spaces for separating the branch names. If you want to use multiple lines in YAML, introduce them with ">-". If you want to allow all branches, set the value to "*".
    default: main master
  enable:
    description: >-
      Can be set to `false` to prevent this action from running. It's helpful in the pipeline, which will not continue releasing, but only building and testing, and that will be decided in the middle of a job execution.
    default: true

outputs:
  bumped:
    description: >-
      Set to `true` if the changelog was updated and the new version set.
    value: ${{ steps.bump.outputs.bumped }}
  new-version:
    description: >-
      The new version written to the changelog and to the project source files.
    value: ${{ steps.bump.outputs.new-version }}
  changed-files:
    description: >-
      Files modified by this action, separated by spaces.
    value: ${{ steps.bump.outputs.changed-files }}

runs:
  using: 'composite'
  steps:
  - name: Setup parameters
    if: ${{ inputs.enable == 'true' }}
    id: setup
    env:
      BV_BRANCHES: ${{ inputs.branches }}
    shell: bash
    run: |
      if [[ "$BV_BRANCHES" == "*" || " $BV_BRANCHES " == *" $GITHUB_REF_NAME "* ]]; then
        echo "enable=true" >> $GITHUB_OUTPUT
      fi
  - name: Install newchanges
    if: ${{ steps.setup.outputs.enable == 'true' }}
    uses: prantlf/install-release-action@v1
    with:
      repo: prantlf/v-newchanges
  - name: Install vp
    if: ${{ steps.setup.outputs.enable == 'true' }}
    uses: prantlf/install-release-action@v1
    with:
      repo: prantlf/vp
  - name: Update changelog and bump version
    if: ${{ steps.setup.outputs.enable == 'true' }}
    id: bump
    shell: bash
    run: |
      VP_OPTIONS="--no-commit --no-failure -v"
      if [[ ! -f "v.mod" ]]; then
        echo "v.mod not found, only updating changelog"
        VP_OPTIONS="$VP_OPTIONS --no-bump"
      fi
      VP_OUT=$(vp $VP_OPTIONS version);
      if [ $? -eq 0 ]; then
        echo "$VP_OUT"
        VP_VER_RE="version ([0-9]+\\.[0-9]+\\.[0-9]+)"
        if [[ "$VP_OUT" =~ $VP_VER_RE ]]; then
          echo "new-version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          VP_LOG_RE=" written to \"([^\"]+)\""
          if [[ "$VP_OUT" =~ $VP_LOG_RE ]]; then
            if [[ -f "v.mod" ]]; then
              VP_EXTRA=" v.mod"
            fi
            echo "changed-files=${BASH_REMATCH[1]}$VP_EXTRA" >> $GITHUB_OUTPUT
          else
            echo "changed files not detected"
            exit 1
          fi
          echo "bumped=true" >> $GITHUB_OUTPUT
        fi
      else
        if [[ "$VP_OUT" != "" ]]; then
          echo "$VP_OUT"
        fi
        exit 1
      fi
